=pod

=head1 XlUtils

A collection of Excel specific functions

=head1 DESCRIPTION

This C<XlUtils> module provides some commonly used functions when dealing with
Excel.

=head1 FUNCTIONS

=head2 sheetExists

    XlUtils.sheetExists "Sheet 3", someWorkbook

Checks whether the given workbook contains a sheet with the given name. The
workbook can be omitted and then defaults to C<ThisWorkbook>.

=head2 commandBarExists

    XlUtils.commandBarExists "MyCmdBar"

Checks whether the current Excel instance has an active command bar with the
given name.

=head2 openWorkbookMaybeOpen

    Set myworkbook = XlUtils.openWorkbookMaybeOpen("C:\myworkbook.xlsx")

Opens a workbook. If the workbook is already open return that existing instance.
The workbook path must be absolute for this function to work.

=head2 isWorkbookOpen

    XlUtils.isWorkbookOpen "C:\myworkbook.xlsx"

Checks whether a given workbook is open. The workbook path must be absolute for
this function to work.

=head2 isWorkbookNameOpen

    XlUtils.isWorkbookNameOpen "myworkbook.xlsx"

Checks whether a given workbook is open. The workbook name is the filename
without the path.

=head2 getOpenWorkbook

    Set myworkbook = XlUtils.getOpenWorkbook("C:\myworkbook.xlsx")

Returns an already opened workbook.
The workbook path must be absolute for this function to work.
Throws C<E_WORKBOOKNOTOPEN> if the workbook is not open.

=head2 makeWritable (commented out)

    XlUtils.makeWritable mySheet

If the given sheet is write protected for VBA, removes that VBA write
protection. The sheet protection itself is re-added with the option
C<UserInterfaceOnly> set.
This function is commented out to allow easier individualization (setting other
protection options). Just copy the function to a different module and remove the
commenting.

=head2 makeWritable2 (commented out)

    XlUtils.makeWritable "mySheet", someWorkbook

Same as C<makeWriteable> but takes a sheet name and optionally a workbook. If no
workbook is given defaults to C<ThisWorkbook>.
This function is commented out to allow easier individualization (setting other
protection options). Just copy the function to a different module and remove the
commenting.

=head2 rowColToExcel

    XlUtils.rowColToExcel 1, 27  ' "AA1"

Takes a row and a column number and turns it into an Excel compatible "A1" cell
address. Row and column numbers are 1-based.
Throws C<E_INDEXOUTOFRANGE> if row or column is <=0.

=head2 validateNumericTextBox_KeyPress, validateNumericTextBox_Exit

    Private Sub txt_myTextBox_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
        XlUtils.validateNumericTextBox_KeyPress Me.txt_myTextBox, KeyAscii
    End Sub
    Private Sub txt_myTextBox_Exit(ByVal Cancel As MSForms.ReturnBoolean)
        XlUtils.validateNumericTextBox_Exit Me.txt_myTextBox, Cancel
    End Sub

Two functions that help in turning a C<TextBox> into a numeric input field.
When used all input except 0-9 and comma is ignored. When exitting the field the
input is validated whether it forms a valid number and the field is turned red
and exitting is probibited when the number is invalid. In addition when typing
a comma it is automatically turned into a dot.

B<Caveat>: The functionality relies on the C<Exit> event. Under many conditions
this event does not fire. E.g. when a C<TextBox> is inside a C<Frame> and one
selects an element outside of the frame. Then the C<Exit> event of the C<Frame>
fires, not the one of the C<TextBox>.

=cut
