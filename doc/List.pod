=pod

=encoding utf8

=head1 List

List - An optionally typed zero based list.

=head1 SYNOPSIS

    Dim l As List: Set l = List_create("apple", 5, 6, "banana")
    l.push "avocado"
    Debug.print l(3) ' banana


=head1 DESCRIPTION

This List class is loosely modelled after the
L<Array class|https://docs.perl6.org/type/Array> in L<Perl6|https://perl6.org/>.

=head2 Typing

This list can be used in two different modes. The mode is decided at
construction time and can not be changed later on.

=over

=item *

In B<untyped> mode, the list can hold values of any type and also of
different type. One creates such a list using the C<List_create> constructor.

=item *

In B<typed> mode, the list is fixed to one type. Only elements of that
type can be added to the list. When trying to add values of a different type
an C<E_TYPEMISMATCH> exception will be thrown. One creates such a list using
the C<List_createT> or the C<List_createLT> constructor. When using the latter
the type is not determined at construction time, but when adding the first
element.

=back

=head2 Performance

This class uses a C<Collection> internally to keep the elements. Collections are
untyped (they can only keep C<Variant> values) and generally considered to be
rather slow. THus this class mey not be the best solution in performance
ciritical applications.

The primary reason for using the C<Collection> object internally is, because it
can create iterators (C<IUnknown>) and thus can be used in C<For Each> loops.
Iterators can not be created natively in VBA so one can not reproduce this
functionality using arrays. See C<List.newEnum()>


=head1 METHODS

=head2 List_create

    Dim l As List: Set l = List_create("apple", 7)

Creates a new untyped list object. The passed things are added to the list.
If a single listy thing is passed its elements are added instead. See L<append>.


=head2 List_createT

    Dim l As List: Set l = List_createT("String")

Creates a new B<T>yped list object. The given string determines the type the
list can hold.


=head2 List_createLT

    Dim l As List: Set l = List_createLT("apple", "banana")

Creates a new B<L>azy B<T>yped list object. The type of the list is determined
by the type of the first element added. The passed things are added to the list.
If a single listy thing is passed its elements are added instead. See L<append>.

It is possible to create an empty lazy typed list.
Such an empty lazy typed list is not the same as an untyped list. As soon as an
element is added the type of that thing is fixed as the list type.

Once the type is set such a list is identical to a list created using
L<List_createT>.


=head2 item

    Debug.print l.item(2)

Returns the specified element. Negative indexes count from the back. -1 is the
last element.
Throws E_INDEXOUTOFRANGE if the index is out of bounds.


=head2 ()

    Debug.print l(2)

Same as L<item>.


=head2 elems

I<ro Property>

Returns the number of elements of the list.


=head2 typed

I<ro Property>

Returns whether this list is typed.
Returns true for a lazy typed list that has not yet settled on its type.


=head2 innerTypeName

I<ro Property>

Returns the type of this list as a String.
An untyped list returns an empty string.
A lazy typed list that has not yet settled on its type returns an empty string.


=head2 push

Adds a single element to the end of the list. Listy things are not unpacked and
added as is.

Throws C<E_TYPEMISMATCH> if the list is typed and the type does not match.


=head2 pop

Removes and returns the last element of the list.

Throws C<E_ILLEGALSTATE> if the list is empty.


=head2 append

    l.append "one", "two", "three"
    l.append otherList

Adds multiple elements to the end of the list. If a single listy thing is passed
its elements are added instead.

Throws C<E_TYPEMISMATCH> if the list is typed and the type does not match.


=head2 unshift

Adds a single element to the start of the list. Listy things are not unpacked
and added as is.

Throws C<E_TYPEMISMATCH> if the list is typed and the type does not match.


=head2 shift

Removes and returns the first element of the list.

Throws C<E_ILLEGALSTATE> if the list is empty.


=head2 prepend

    l.prepend "one", "two", "three"
    l.prepend otherList

Adds multiple elements to the beginning of the list. If a single listy thing is
passed its elements are added instead.

Throws C<E_TYPEMISMATCH> if the list is typed and the type does not match.


=head2 splice

    splice(index, elems, Optional replacement) As List


    Set l = List_create(1, 2, 3, 4, 5)
    Set prev = l.splice(1, 2, List_create("two", "three"))
    Debug.print l.gist    ' [1, two, three, 4, 5]<Untyped>
    Debug.print prev.gist ' [2, 3]<Untyped>

Removes [elems] elements from the list, starting with the [start] element and
inserts [replacement] in its place.
[replacement] is optional and can be a C<List> or an C<array>. If no
[replacement] is given, this function only removes the given range.
[elems] can be 0. C<splice> then only inserts the replacement at position
[index], this means before the element at position [index].

Throws C<E_INDEXOUTOFRANGE> if the index is out of range.


=head2 clone

    Set l2 = l.clone

Creates and returns a shallow clone of the list. This means that the elements in
the list are not cloned.
So when cloning a list with objects in it both lists will contain the same
objects afterwards and modifying the objects in one list will also affect the
objects in the other.

=head2 getRange

    getRange(index, elems) As List


    List_create(1, 2, 3).getRange 1, 2 ' [2, 3]

Retrieves and returns a sub list. The sub list will have the same type
constraint as the original list.

Throws C<E_INDEXOUTOFRANGE> if the index is out of range.

=head2 remove

    remove(index, Optional elems = 1)

Removes elements from the list. By default removes a single element.

Throws C<E_INDEXOUTOFRANGE> if the index is out of range.

=head2 first

Returns the first element of the list.

Throws C<E_ILLEGALSTATE> if the list is empty.

=head2 last

Returns the last element of the list.

Throws C<E_ILLEGALSTATE> if the list is empty.

=head2 clear

Removes all elements from the list.

=head2 contains

Determines whether an element is in the List.

Uses C<Variants.equals> to determine element equality. This means that objects
are compared using C<Is>.

=head2 indexOf

Searches for the specified object and returns the 0-based index of the first
occurrence within the List.
Returns -1 if no occurence is found.

Uses C<Variants.equals> to determine element equality. This means that objects
are compared using C<Is>.

=head2 lastIndexOf

Searches for the specified object and returns the 0-based index of the last
occurrence within the List.
Returns -1 if no occurence is found.

Uses C<Variants.equals> to determine element equality. This means that objects
are compared using C<Is>.

=head2 max

Returns the largest value in the list.

Uses C<Math.cmp> to compare elements.

Throws C<E_TYPEMISMATCH> if the elements are not C<Variants.isComparable()>.

=head2 min

Returns the smallest value in the list.

Uses C<Math.cmp> to compare elements.

Throws C<E_TYPEMISMATCH> if the elements are not C<Variants.isComparable()>.

=head2 reverse

Returns a new list with the same elements in reversed order.

=head2 sort

    sort(Optional sortOrder As sortOrder = ascending) As List

Returns a sorted copy of this list.

C<sortOrder> can be C<ascending> or C<descending>.

Throws C<E_ILLEGALSTATE> if the elements are not C<Variants.isComparable()> or
of different type.

=head2 uniq

Returns a copy of this list with all duplicate elements removed.

If an element is contained multiple times the first occurrence is kept and all
later ones are removed.

Uses C<Variants.equals> to determine element equality. This means that objects
are compared using C<Is>.

=head2 equals

Tests whether this list equals another list. This means:

=over

=item *

The two lists have the same type constraint.

=item *

Each element is C<Variants.equals>. This means that objects are compared
using C<Is>.

=back

=head2 toArray

Copies the elements of the List to a new 0-based array.

=head2 toString

Returns a string that represents the current List object.

=head2 gist

Returns a human readable string that represents the current List object.

=head1 BUGS AND LIMITATIONS

=head2 Interfaces

The List object does not work with Interface hierarchies in typed mode. If you
create a List of a base type and try to push() subtypes it will fail with a type
mismatch. Use an untyped list in such cases.

This is a result of VBA not allowing dynamically checking a type. The C<TypeOf
obj Is Class> construct does not allow comparing against Strings. Thus it is
impossible to use TypeOf dynamically. C<TypeName(obj)> on the other hand only
returns the direct class name of the given object and does not provide
information about implemented Interfaces.


=head2 For Each "Method not supported"

If C<For Each> loops return "Method not supported", then a required VB attribute
of the method C<List.newEnum()> is missing. Look at the source code of that
function for repair instructions.

=cut
